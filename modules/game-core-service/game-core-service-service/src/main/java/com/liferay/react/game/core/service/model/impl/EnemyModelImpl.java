/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.react.game.core.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.react.game.core.service.model.Enemy;
import com.liferay.react.game.core.service.model.EnemyModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Enemy service. Represents a row in the &quot;ReactGame_Enemy&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EnemyModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EnemyImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EnemyImpl
 * @generated
 */
public class EnemyModelImpl extends BaseModelImpl<Enemy> implements EnemyModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a enemy model instance should use the <code>Enemy</code> interface instead.
	 */
	public static final String TABLE_NAME = "ReactGame_Enemy";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"enemyId", Types.BIGINT},
		{"enemyName", Types.VARCHAR}, {"level", Types.INTEGER},
		{"hitPoints", Types.INTEGER}, {"xpDrop", Types.INTEGER},
		{"imageURL", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("enemyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("enemyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("level", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("hitPoints", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("xpDrop", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("imageURL", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ReactGame_Enemy (uuid_ VARCHAR(75) null,enemyId LONG not null primary key,enemyName VARCHAR(75) null,level INTEGER,hitPoints INTEGER,xpDrop INTEGER,imageURL VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table ReactGame_Enemy";

	public static final String ORDER_BY_JPQL = " ORDER BY enemy.enemyId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ReactGame_Enemy.enemyId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ENEMYNAME_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ENEMYID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public EnemyModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _enemyId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEnemyId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _enemyId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Enemy.class;
	}

	@Override
	public String getModelClassName() {
		return Enemy.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Enemy, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Enemy, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Enemy, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Enemy)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Enemy, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Enemy, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Enemy)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Enemy, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Enemy, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Enemy>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Enemy.class.getClassLoader(), Enemy.class, ModelWrapper.class);

		try {
			Constructor<Enemy> constructor =
				(Constructor<Enemy>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Enemy, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Enemy, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Enemy, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Enemy, Object>>();
		Map<String, BiConsumer<Enemy, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Enemy, ?>>();

		attributeGetterFunctions.put("uuid", Enemy::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Enemy, String>)Enemy::setUuid);
		attributeGetterFunctions.put("enemyId", Enemy::getEnemyId);
		attributeSetterBiConsumers.put(
			"enemyId", (BiConsumer<Enemy, Long>)Enemy::setEnemyId);
		attributeGetterFunctions.put("enemyName", Enemy::getEnemyName);
		attributeSetterBiConsumers.put(
			"enemyName", (BiConsumer<Enemy, String>)Enemy::setEnemyName);
		attributeGetterFunctions.put("level", Enemy::getLevel);
		attributeSetterBiConsumers.put(
			"level", (BiConsumer<Enemy, Integer>)Enemy::setLevel);
		attributeGetterFunctions.put("hitPoints", Enemy::getHitPoints);
		attributeSetterBiConsumers.put(
			"hitPoints", (BiConsumer<Enemy, Integer>)Enemy::setHitPoints);
		attributeGetterFunctions.put("xpDrop", Enemy::getXpDrop);
		attributeSetterBiConsumers.put(
			"xpDrop", (BiConsumer<Enemy, Integer>)Enemy::setXpDrop);
		attributeGetterFunctions.put("imageURL", Enemy::getImageURL);
		attributeSetterBiConsumers.put(
			"imageURL", (BiConsumer<Enemy, String>)Enemy::setImageURL);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getEnemyId() {
		return _enemyId;
	}

	@Override
	public void setEnemyId(long enemyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_enemyId = enemyId;
	}

	@Override
	public String getEnemyName() {
		if (_enemyName == null) {
			return "";
		}
		else {
			return _enemyName;
		}
	}

	@Override
	public void setEnemyName(String enemyName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_enemyName = enemyName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalEnemyName() {
		return getColumnOriginalValue("enemyName");
	}

	@Override
	public int getLevel() {
		return _level;
	}

	@Override
	public void setLevel(int level) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_level = level;
	}

	@Override
	public int getHitPoints() {
		return _hitPoints;
	}

	@Override
	public void setHitPoints(int hitPoints) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hitPoints = hitPoints;
	}

	@Override
	public int getXpDrop() {
		return _xpDrop;
	}

	@Override
	public void setXpDrop(int xpDrop) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_xpDrop = xpDrop;
	}

	@Override
	public String getImageURL() {
		if (_imageURL == null) {
			return "";
		}
		else {
			return _imageURL;
		}
	}

	@Override
	public void setImageURL(String imageURL) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_imageURL = imageURL;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Enemy.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Enemy toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Enemy>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EnemyImpl enemyImpl = new EnemyImpl();

		enemyImpl.setUuid(getUuid());
		enemyImpl.setEnemyId(getEnemyId());
		enemyImpl.setEnemyName(getEnemyName());
		enemyImpl.setLevel(getLevel());
		enemyImpl.setHitPoints(getHitPoints());
		enemyImpl.setXpDrop(getXpDrop());
		enemyImpl.setImageURL(getImageURL());

		enemyImpl.resetOriginalValues();

		return enemyImpl;
	}

	@Override
	public Enemy cloneWithOriginalValues() {
		EnemyImpl enemyImpl = new EnemyImpl();

		enemyImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		enemyImpl.setEnemyId(this.<Long>getColumnOriginalValue("enemyId"));
		enemyImpl.setEnemyName(
			this.<String>getColumnOriginalValue("enemyName"));
		enemyImpl.setLevel(this.<Integer>getColumnOriginalValue("level"));
		enemyImpl.setHitPoints(
			this.<Integer>getColumnOriginalValue("hitPoints"));
		enemyImpl.setXpDrop(this.<Integer>getColumnOriginalValue("xpDrop"));
		enemyImpl.setImageURL(this.<String>getColumnOriginalValue("imageURL"));

		return enemyImpl;
	}

	@Override
	public int compareTo(Enemy enemy) {
		long primaryKey = enemy.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Enemy)) {
			return false;
		}

		Enemy enemy = (Enemy)object;

		long primaryKey = enemy.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Enemy> toCacheModel() {
		EnemyCacheModel enemyCacheModel = new EnemyCacheModel();

		enemyCacheModel.uuid = getUuid();

		String uuid = enemyCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			enemyCacheModel.uuid = null;
		}

		enemyCacheModel.enemyId = getEnemyId();

		enemyCacheModel.enemyName = getEnemyName();

		String enemyName = enemyCacheModel.enemyName;

		if ((enemyName != null) && (enemyName.length() == 0)) {
			enemyCacheModel.enemyName = null;
		}

		enemyCacheModel.level = getLevel();

		enemyCacheModel.hitPoints = getHitPoints();

		enemyCacheModel.xpDrop = getXpDrop();

		enemyCacheModel.imageURL = getImageURL();

		String imageURL = enemyCacheModel.imageURL;

		if ((imageURL != null) && (imageURL.length() == 0)) {
			enemyCacheModel.imageURL = null;
		}

		return enemyCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Enemy, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Enemy, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Enemy, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Enemy)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Enemy, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Enemy, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Enemy, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Enemy)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Enemy>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _enemyId;
	private String _enemyName;
	private int _level;
	private int _hitPoints;
	private int _xpDrop;
	private String _imageURL;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Enemy, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Enemy)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("enemyId", _enemyId);
		_columnOriginalValues.put("enemyName", _enemyName);
		_columnOriginalValues.put("level", _level);
		_columnOriginalValues.put("hitPoints", _hitPoints);
		_columnOriginalValues.put("xpDrop", _xpDrop);
		_columnOriginalValues.put("imageURL", _imageURL);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("enemyId", 2L);

		columnBitmasks.put("enemyName", 4L);

		columnBitmasks.put("level", 8L);

		columnBitmasks.put("hitPoints", 16L);

		columnBitmasks.put("xpDrop", 32L);

		columnBitmasks.put("imageURL", 64L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Enemy _escapedModel;

}